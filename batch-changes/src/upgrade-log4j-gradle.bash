# This file's contents are inserted into ../upgrade-log4j-gradle.yml.

set -e -o nounset -o pipefail

# Run for all Gradle subprojects.
PROJECTS=$(./gradlew -q projects | sed -n 's/.*--- Project '"'"'\([^ ]*\)'"'"'.*/\1/p' | sort)
for proj in $PROJECTS
do
	# Find vulnerable log4j dependency versions among all transitive dependencies.
	VULN_LOG4J_DEPS=$(./gradlew -q "$proj":dependencies | sed -n 's/.*--- \([^ ]*\).*/\1/p' | sort | uniq | grep -E '^org.apache.logging.log4j:.*:2.((0|1|2|3|4|5|6|7|8|9|10|11|12|13|14)(\.[0-9]+)|(14\.1))$')
	if [ -n "$VULN_LOG4J_DEPS" ]; then
		echo Vulnerable log4j dependencies found in Gradle subject "$proj":
		echo "$VULN_LOG4J_DEPS"
		echo

		# Inject a rule into the Gradle build file to force usage of a non-vulnerable log4j version.
		GRADLE_BUILD_FILE=$(./gradlew -q "$proj":properties | grep '^buildFile: ' | cut -d ' ' -f 2)

		# This marker tells us if the Gradle build file already has the build rule injected (so we
		# don't inject it twice).
		MARKER="#upgrade-log4j-gradle-cve-2021-44228"
		if grep -q "$MARKER" "$GRADLE_BUILD_FILE"; then
			echo Not updating "$GRADLE_BUILD_FILE" because it already contains "$MARKER"
		else
			cat <<EOF >> "$GRADLE_BUILD_FILE"

// Force usage of log4j dependencies that are not vulnerable to CVE-2021-44228. $MARKER
configurations.all {
  resolutionStrategy.eachDependency { details ->
    if (details.target.group == 'org.apache.logging.log4j' && details.target.version < '2.17.0') {
      details.useVersion '2.17.0'
      details.because 'CVE-2021-44228'
    }
  }
}
EOF
			echo Updated "$GRADLE_BUILD_FILE"
		fi
		echo
	fi
done
